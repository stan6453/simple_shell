#include "main.h"

int main(int argc, char *argv[], char *env[])
{
	char *usercommand;
	char *commandarray[10];

	while(1)
	{
		displaycwd();
		usercommand = getusercommand();
		convert_to_argv(usercommand, commandarray);
		execute_user_command(argv[0], commandarray, env);
		free(usercommand);
	}
	return (0);
}



void displaycwd(void)
{
	char CWD[256];
	printf("%s$ ", getcwd(CWD, 256));
}




char *getusercommand(void)
{
	char *buf = NULL;
	size_t bufsize = 0;
	size_t numchar;

	numchar = getline(&buf, &bufsize, stdin);

	if (feof(stdin))
	{
		exit(-1);
	}

	if (buf[numchar - 1] == '\n')
		buf[numchar - 1] = '\0';

	return buf;

}


void execute_user_command(char *myprog, char *myargv[], char *env[])
{
	struct stat sfile;
	char *path_to_command;

	path_to_command = resolve_path(myargv[0], getenv("PATH"), myprog);
	if(path_to_command == NULL)
		return;
	if (fork() == 0)
	{
		execve(path_to_command, myargv, NULL);
		free(path_to_command);
	}
	else
	{
		wait(NULL);
	}
}



void convert_to_argv(char *command, char *commandarray[])
{
	int i = 0;

	commandarray[i] = strtok(command, " ");
	while (commandarray[i] != NULL)
	{
		i++;
		commandarray[i] = strtok(NULL, " ");
	}
}


void printarr(char *arr[])
{
	while (*arr != NULL)
	{
		printf("%s\n", *arr);
		arr++;
	}
}


char *resolve_path(char *myprog, char *progname, char *pathvar)
{
	struct stat sfile;
	char *path;
	char *fullpath = malloc(50);

	path = strtok(progname, ":");
	do
	{
		if(stat(path "/" progname, &sfile) != -1)
		{
			strcpy(fullpath, path);
			strcpy(fullpath, "/");
			strcpy(fullpath, progname);
			return fullpath;
		}
		path = strtok(NULL, ":");
	}
	while (argv[i] != NULL)

	dprintf(2, "%s: ", myprog);
	perror("");
	return NULL;
}
